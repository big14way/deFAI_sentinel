/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DeFiSentinelInterface extends utils.Interface {
  functions: {
    "RISK_THRESHOLD()": FunctionFragment;
    "anomalies(uint256)": FunctionFragment;
    "calculateUserRiskScore(address)": FunctionFragment;
    "getAllProtocols()": FunctionFragment;
    "getAnomalyCount()": FunctionFragment;
    "getProtocolDetails(address)": FunctionFragment;
    "getUserExposures(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "protocols(address)": FunctionFragment;
    "recordAnomaly(address,string,string,uint256)": FunctionFragment;
    "recordUserExposure(address,address)": FunctionFragment;
    "registerProtocol(address,string,uint256)": FunctionFragment;
    "registeredProtocols(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveAnomaly(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRiskScore(address,uint256)": FunctionFragment;
    "userExposures(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RISK_THRESHOLD"
      | "anomalies"
      | "calculateUserRiskScore"
      | "getAllProtocols"
      | "getAnomalyCount"
      | "getProtocolDetails"
      | "getUserExposures"
      | "owner"
      | "protocols"
      | "recordAnomaly"
      | "recordUserExposure"
      | "registerProtocol"
      | "registeredProtocols"
      | "renounceOwnership"
      | "resolveAnomaly"
      | "transferOwnership"
      | "updateRiskScore"
      | "userExposures"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "RISK_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "anomalies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateUserRiskScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProtocols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnomalyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExposures",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocols",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordAnomaly",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recordUserExposure",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProtocol",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredProtocols",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAnomaly",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRiskScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userExposures",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "RISK_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anomalies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateUserRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnomalyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserExposures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocols", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordAnomaly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordUserExposure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredProtocols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAnomaly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userExposures",
    data: BytesLike
  ): Result;

  events: {
    "AlertRaised(address,address,string,uint256,uint256)": EventFragment;
    "AnomalyDetected(address,string,uint256)": EventFragment;
    "AnomalyResolved(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProtocolRegistered(address,string,uint256)": EventFragment;
    "UserExposureRecorded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AlertRaised"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnomalyDetected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnomalyResolved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserExposureRecorded"): EventFragment;
}

export interface AlertRaisedEventObject {
  protocol: string;
  caller: string;
  alertType: string;
  riskScore: BigNumber;
  timestamp: BigNumber;
}
export type AlertRaisedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  AlertRaisedEventObject
>;

export type AlertRaisedEventFilter = TypedEventFilter<AlertRaisedEvent>;

export interface AnomalyDetectedEventObject {
  protocol: string;
  anomalyType: string;
  severity: BigNumber;
}
export type AnomalyDetectedEvent = TypedEvent<
  [string, string, BigNumber],
  AnomalyDetectedEventObject
>;

export type AnomalyDetectedEventFilter = TypedEventFilter<AnomalyDetectedEvent>;

export interface AnomalyResolvedEventObject {
  anomalyId: BigNumber;
}
export type AnomalyResolvedEvent = TypedEvent<
  [BigNumber],
  AnomalyResolvedEventObject
>;

export type AnomalyResolvedEventFilter = TypedEventFilter<AnomalyResolvedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProtocolRegisteredEventObject {
  protocol: string;
  name: string;
  timestamp: BigNumber;
}
export type ProtocolRegisteredEvent = TypedEvent<
  [string, string, BigNumber],
  ProtocolRegisteredEventObject
>;

export type ProtocolRegisteredEventFilter =
  TypedEventFilter<ProtocolRegisteredEvent>;

export interface UserExposureRecordedEventObject {
  user: string;
  protocol: string;
}
export type UserExposureRecordedEvent = TypedEvent<
  [string, string],
  UserExposureRecordedEventObject
>;

export type UserExposureRecordedEventFilter =
  TypedEventFilter<UserExposureRecordedEvent>;

export interface DeFiSentinel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeFiSentinelInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RISK_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    anomalies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, boolean] & {
        protocol: string;
        anomalyType: string;
        description: string;
        severity: BigNumber;
        timestamp: BigNumber;
        resolved: boolean;
      }
    >;

    calculateUserRiskScore(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllProtocols(overrides?: CallOverrides): Promise<[string[]]>;

    getAnomalyCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolDetails(
      _protocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        name: string;
        isActive: boolean;
        riskScore: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    getUserExposures(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocols(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber] & {
        contractAddress: string;
        name: string;
        riskScore: BigNumber;
        isActive: boolean;
        lastUpdateTime: BigNumber;
      }
    >;

    recordAnomaly(
      _protocol: PromiseOrValue<string>,
      _anomalyType: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _severity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recordUserExposure(
      _user: PromiseOrValue<string>,
      _protocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerProtocol(
      _protocol: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _initialRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredProtocols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveAnomaly(
      _anomalyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRiskScore(
      _protocol: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userExposures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  anomalies(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, boolean] & {
      protocol: string;
      anomalyType: string;
      description: string;
      severity: BigNumber;
      timestamp: BigNumber;
      resolved: boolean;
    }
  >;

  calculateUserRiskScore(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllProtocols(overrides?: CallOverrides): Promise<string[]>;

  getAnomalyCount(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolDetails(
    _protocol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      name: string;
      isActive: boolean;
      riskScore: BigNumber;
      lastUpdateTime: BigNumber;
    }
  >;

  getUserExposures(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocols(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, BigNumber] & {
      contractAddress: string;
      name: string;
      riskScore: BigNumber;
      isActive: boolean;
      lastUpdateTime: BigNumber;
    }
  >;

  recordAnomaly(
    _protocol: PromiseOrValue<string>,
    _anomalyType: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _severity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recordUserExposure(
    _user: PromiseOrValue<string>,
    _protocol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerProtocol(
    _protocol: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _initialRiskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredProtocols(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveAnomaly(
    _anomalyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRiskScore(
    _protocol: PromiseOrValue<string>,
    _riskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userExposures(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    anomalies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, boolean] & {
        protocol: string;
        anomalyType: string;
        description: string;
        severity: BigNumber;
        timestamp: BigNumber;
        resolved: boolean;
      }
    >;

    calculateUserRiskScore(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllProtocols(overrides?: CallOverrides): Promise<string[]>;

    getAnomalyCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolDetails(
      _protocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        name: string;
        isActive: boolean;
        riskScore: BigNumber;
        lastUpdateTime: BigNumber;
      }
    >;

    getUserExposures(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocols(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber] & {
        contractAddress: string;
        name: string;
        riskScore: BigNumber;
        isActive: boolean;
        lastUpdateTime: BigNumber;
      }
    >;

    recordAnomaly(
      _protocol: PromiseOrValue<string>,
      _anomalyType: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _severity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recordUserExposure(
      _user: PromiseOrValue<string>,
      _protocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerProtocol(
      _protocol: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _initialRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredProtocols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveAnomaly(
      _anomalyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRiskScore(
      _protocol: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userExposures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AlertRaised(address,address,string,uint256,uint256)"(
      protocol?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      alertType?: null,
      riskScore?: null,
      timestamp?: null
    ): AlertRaisedEventFilter;
    AlertRaised(
      protocol?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      alertType?: null,
      riskScore?: null,
      timestamp?: null
    ): AlertRaisedEventFilter;

    "AnomalyDetected(address,string,uint256)"(
      protocol?: PromiseOrValue<string> | null,
      anomalyType?: null,
      severity?: null
    ): AnomalyDetectedEventFilter;
    AnomalyDetected(
      protocol?: PromiseOrValue<string> | null,
      anomalyType?: null,
      severity?: null
    ): AnomalyDetectedEventFilter;

    "AnomalyResolved(uint256)"(
      anomalyId?: PromiseOrValue<BigNumberish> | null
    ): AnomalyResolvedEventFilter;
    AnomalyResolved(
      anomalyId?: PromiseOrValue<BigNumberish> | null
    ): AnomalyResolvedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProtocolRegistered(address,string,uint256)"(
      protocol?: PromiseOrValue<string> | null,
      name?: null,
      timestamp?: null
    ): ProtocolRegisteredEventFilter;
    ProtocolRegistered(
      protocol?: PromiseOrValue<string> | null,
      name?: null,
      timestamp?: null
    ): ProtocolRegisteredEventFilter;

    "UserExposureRecorded(address,address)"(
      user?: PromiseOrValue<string> | null,
      protocol?: PromiseOrValue<string> | null
    ): UserExposureRecordedEventFilter;
    UserExposureRecorded(
      user?: PromiseOrValue<string> | null,
      protocol?: PromiseOrValue<string> | null
    ): UserExposureRecordedEventFilter;
  };

  estimateGas: {
    RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    anomalies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUserRiskScore(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllProtocols(overrides?: CallOverrides): Promise<BigNumber>;

    getAnomalyCount(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolDetails(
      _protocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserExposures(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocols(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordAnomaly(
      _protocol: PromiseOrValue<string>,
      _anomalyType: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _severity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recordUserExposure(
      _user: PromiseOrValue<string>,
      _protocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerProtocol(
      _protocol: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _initialRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredProtocols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveAnomaly(
      _anomalyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRiskScore(
      _protocol: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userExposures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RISK_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    anomalies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUserRiskScore(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllProtocols(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAnomalyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolDetails(
      _protocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserExposures(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocols(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordAnomaly(
      _protocol: PromiseOrValue<string>,
      _anomalyType: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _severity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recordUserExposure(
      _user: PromiseOrValue<string>,
      _protocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerProtocol(
      _protocol: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _initialRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredProtocols(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveAnomaly(
      _anomalyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRiskScore(
      _protocol: PromiseOrValue<string>,
      _riskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userExposures(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
